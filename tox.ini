# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
skip_missing_interpreters=True
# When updating, don't forget .travis.yml!
envlist = py27, coverage, pep8, pylint, docs, js
#, py32, py33, py34, py35, pypy, jython, 
skipsdist = True

[pytest]
testpaths = tests

[testenv]
changedir = remote_thermo_measurement
commands = 
	./setup.py develop
	py.test tests.py
	{envpython} thermo_daemon.py testing
deps =
	-r{toxinidir}/remote_thermo_measurement/dev-requirements.txt
#	-r{toxinidir}/remote_thermo_measurement/requirements.txt

[testenv:coverage]
changedir = {[testenv]changedir}
commands =
	./setup.py develop
	coverage erase
	rm -f {toxinidir}/coverage.xml
	coverage run -a --include="thermo_daemon.py" -m unittest thermo_daemon
	coverage run -a --include="thermo_daemon.py" thermo_daemon.py testing
	coverage xml
	cp -v coverage.xml {toxinidir}
	coverage report -m --fail-under=100
deps = {[testenv]deps}
#ignore_errors = True
whitelist_externals = 
	cp
	rm

[testenv:codacy-coverage-upload]
commands = 
	tox -e coverage
	python-codacy-coverage -r {toxinidir}/coverage.xml
deps = 
	codacy-coverage
	{[testenv]deps}
ignore_errors = True
whitelist_externals =
	tox
	cp

[testenv:pep8]
changedir = {[testenv]changedir}
commands = pep8 --show-source --count thermo_daemon.py
deps = pep8

[testenv:pylint]
whitelist_externals = bash
commands= bash -c "pylint -E thermo_daemon"
deps=pylint
#	-r{toxinidir}/requirements.txt
#	-r{toxinidir}/dev-requirements.txt

[testenv:docs]
changedir = {[testenv]changedir}/docs
commands = 
	sphinx-build -aEn -b html . _build/html
	sphinx-build -aEn -b coverage . _build/coverage
deps = sphinx
	{[testenv]deps}

[testenv:js]
changedir = .
whitelist_externals = 
	npm
	phantomjs
setenv =
	PATH={toxinidir}/web_interface/tests/phantomjs-2.1.1-linux-x86_64/bin/:{env:PATH}
commands =
	npm install -g phantomjs-prebuilt blanket jquery sinon qunitjs qunit-phantomjs-runner karma karma-qunit karma-coverage
	phantomjs lib/node_modules/qunit-phantomjs-runner/runner.js web_interface/tests/tests-qunit.html
#	{toxinidir}/web_interface/tests/phantomjs-2.1.1-linux-x86_64/bin/phantomjs {toxinidir}/web_interface/tests/qunit-phantomjs-runner/runner.js web_interface/tests/tests-qunit.html
passenv = DISPLAY
#	- wget -nc -O web_interface/tests/blanket.min.js "https://raw.github.com/alex-seville/blanket/master/dist/qunit/blanket.min.js"
#	- wget -nc -O web_interface/tests/phantomjs-2.1.1-linux-x86_64.tar.bz2 "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2"
#	tar xf  web_interface/tests/phantomjs-2.1.1-linux-x86_64.tar.bz2 -C web_interface/tests/
#	- wget -nc -O web_interface/tests/jquery.min.js "https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"
#	- wget -nc -O web_interface/tests/sinon-1.17.3.js "http://sinonjs.org/releases/sinon-1.17.3.js"
#	- wget -nc -O web_interface/tests/qunit-1.23.1.js "https://code.jquery.com/qunit/qunit-1.23.1.js"

[testenv:jscover]
changedir = {[testenv:js]changedir}
whitelist_externals = 
	{[testenv:js]whitelist_externals}
	istanbul
setenv = {[testenv:js]setenv}
passenv = {[testenv:js]passenv}
commands = 
	npm install -g phantomjs-prebuilt jquery sinon qunitjs qunit-phantomjs-runner istanbul karma karma-qunit karma-coverage
	karma start tests.js
#	istanbul instrument web_interface/js/thermostat.js --output web_interface/js/thermostat.js
#	istanbul cover phantomjs lib/node_modules/qunit-phantomjs-runner/runner.js web_interface/tests/tests-qunit.html
	

[pep8]
show-source = True
count = True

